@startuml
'https://plantuml.com/class-diagram

Package LoggingProject {
    DebugServer <-> DatabaseHandler : calls DB Data

    class DebugServer {
        + setup()
        + addSensor(sensor)
        + getSensors()
    }

    Note top of DebugServer : setup() registers all appropriate\n page handlers and starts server

    DebugServer <-- PageProvider : "utilizes"

    abstract PageProvider {
        + handler()
    }

    LoggingPage -up-|> PageProvider : implements
    LiveDataPage -up-|> PageProvider : implements
    MainPage -up-|> PageProvider : implements
    SettingsPage -up-|> PageProvider : implements

    class LoggingPage {}
    class LiveDataPage {}
    class MainPage {}
    class SettingsPage {}

    Note right of PageProvider : Provides complete HTML Pages\n with JS,CSS and required libraries

    class Sensor {
        - sensorName
        - className
        - sensorFunctions
        + addFunction(SensorFunction)
        + getSensorFunctions()
        + getSensorName()
    }

    class SensorFunction {
        - name
        - function
        - sensorstate
        + setSensorState(state)
        + getSensorState()
        + getFunctionName()
    }

    DebugServer "1" *-- "many" Sensor : "contains"
    Sensor "1" *-- "many" SensorFunction : "contains"

    class Utility {
        + directionToString(direction)
        + sensorToString(sensor)
        + logLevelToString(level)
    }
    DebugServer *-- Utility : "utilizes"
    Note bottom of Utility : Provides conversion functions\n for enums

    Logger --> DatabaseHandler : adds DB entries

    class Logger {
        + List Instruments
        + log(...)
    }

    Logger <.-> LoggingPOCO : builds POCOs from log()

    abstract LoggingPOCO {
        Message
        Time
        Component
        Parameters
        EntryType
    }

    Note right of LoggingPOCO : Contains all data used for\n whatever function is logged

    LoggingPOCO .-> EntryType : uses

    enum EntryType {
        Automatic
        UserCall
    }

    Note right of EntryType : Defines how the logging command\n was created

    DebugServer --> Logger : Provides required instruments\n for measurements

    class DatabaseHandler {
        - Database db
        writePOCOToDB()
        getPOCOs()
    }
}

Package Dezibot {
    Dezibot -right-> DebugServer : calls
    class Dezibot {}

    Logger --> GenericRobotController : Requests measurement data\n when instructed
    GenericRobotController -left-> Logger : calls

    class GenericRobotController {

    }

    Note bottom of GenericRobotController : Example for a Robot Controller\nlike Motion.cpp
}



@enduml
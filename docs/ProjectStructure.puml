@startuml
'https://plantuml.com/class-diagram

Package LoggingProject {
    LoggingPage <-> LogDatabase : requests all log entries

    class DebugServer {
        + setup()
        + addSensor(sensor)
        + getSensors()
    }

    Note top of DebugServer : setup() registers all appropriate\n page handlers and starts server

    DebugServer <-- PageProvider : "utilizes"

    abstract PageProvider {
        + handler()
    }

    LoggingPage -up-|> PageProvider : implements
    LiveDataPage -up-|> PageProvider : implements
    MainPage -up-|> PageProvider : implements
    SettingsPage -up-|> PageProvider : implements

    class LoggingPage {
        - sendLogs()
        - sendNewLogs()
        - processLogs()
        + handler()
        + cssHandler()
        + jsHandler()
    }

    class LiveDataPage {
        + handler()
        + cssHandler()
        + jsHandler()
    }

    class MainPage {
        + handler()
        + cssHandler()
        + jsHandler()
    }

    class SettingsPage {
        - sendSensorData()
        - toggleSensorFunction()
        + handler()
        + cssHandler()
        + jsHandler()
    }

    Note right of PageProvider : Provides complete HTML Pages\n with JS,CSS and required libraries

    class Sensor {
        - sensorName
        - className
        - sensorFunctions
        + addFunction(SensorFunction)
        + getSensorFunctions()
        + getSensorName()
    }

    class SensorFunction {
        - name
        - function
        - sensorstate
        + setSensorState(state)
        + getSensorState()
        + getFunctionName()
    }

    DebugServer "1" *-up- "many" Sensor : "contains"
    Sensor "1" *-- "many" SensorFunction : "contains"

    class Utility {
        + directionToString(direction)
        + sensorToString(sensor)
        + logLevelToString(level)
    }
    DebugServer *-- Utility : "utilizes"
    Note bottom of Utility : Provides string conversion\nfunctions for enums

    struct LogEntry {
        Message
        TimeStamp
        LogLevel
    }

    enum Level {
        INFO
        WARNING
        ERROR
        DEBUG
        TRACE
    }

    LogEntry -d-> Level

    LogEntry .left-> LogDatabase : added to log entry vector

    class Logger {
        + Logger getInstance
        + logInfo()
        + logWarning()
        + logError()
        + logDebug()
        + logTrace()
    }

    Logger .-> LogEntry : Creates Log Entry

    DebugServer --> Logger : Provides required instruments\n for measurements

    class LogDatabase {
        - vector LogEntries
        + addLog()
        + getLogs()
        + getNewLogs()
    }
}

Package Dezibot {
    Dezibot -right-> DebugServer : calls setup() function
    class Dezibot {}

    GenericRobotController --> Logger : calls logging function

    class GenericRobotController {

    }

    Note left of GenericRobotController : Example for a Robot Controller\nlike Motion.cpp
}



@enduml